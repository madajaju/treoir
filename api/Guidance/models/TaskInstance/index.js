class TaskInstance {
    static definition = {
        name: 'TaskInstance',
        description: 'Represents a specific instance of a task generated during workflow execution.',
        attributes: {
            name: {
                type: 'string',
                description: 'Name of the task instance.',
            },
            inputs: {
                type: 'json',
                description: 'Inputs provided for this task instance.',
            },
            userprompt: {
                type: 'string',
                description: 'Prompt for this task instance.',
            },
            outputs: {
                type: 'json',
                description: 'Outputs generated by this task instance.',
            },
            details: {
                type: 'string',
                description: 'Additional details about this task instance.',
            }
        },
        associations: {
            template: {
                type: 'TaskTemplate',
                cardinality: 1,
                description: 'The task template that this instance was created from.',
            },
            stage: {
                type: 'WorkflowStage',
                cardinality: 1,
                description: 'The stage that this task instance belongs to.',
            }
        },
        statenet: {
            Init: {
                description: "Initial state of the task, before any preparation for execution.",
                events: {
                    initialize: {
                        Ready: { }
                    }
                }
            },
            Ready: {
                description: "Task has been successfully initialized and is ready to run.",
                events: {
                    start: {
                        InProgress: { }
                    },
                    fail: {
                        Failed: { }
                    },
                    cancelled: {
                        Cancelled: { }
                    }
                }
            },
            InProgress: {
                description: "Task is actively running and performing its work.",
                events: {
                    complete: {
                        Completed: { }
                    },
                    wait: {
                        Waiting: { }
                    },
                    fail: {
                        Failed: { }
                    }
                },
                actions: {
                    exit: {
                        myExit: (task) => {
                           console.log("Exiting InProgresss Finished: " + task.name ) ;
                        }
                    }
                }
            },
            Waiting: {
                description: "Task is waiting for external input or resources to proceed.",
                events: {
                    resume: {
                        InProgress: { }
                    },
                    fail: {
                        Failed: { }
                    }
                }
            },
            Completed: {
                description: "Task has successfully completed its work.",
                events: {
                    reset: {
                        Ready: { }
                    }
                },
                actions: {
                    entry: {
                        notifyStage: function (task) {
                            setTimeout(() => {
                                task.stage.completeTask(task);
                            }, 0);
                        }
                    }
                }
            },
            Failed: {
                description: "Task has failed due to errors or unmet conditions.",
                events: {
                    reset: {
                        Init: { }
                    }
                },
                actions: {
                    entry: {
                        notifyStage: function (task) {
                            task.stage.completeTask(task);
                        }
                    }
                }
            }
        }
    }
}

module.exports = TaskInstance;