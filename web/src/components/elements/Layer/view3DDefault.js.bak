import * as THREE from "three";
import AText from "$lib/AText.js";
import {getLayer, layerNodes} from '../../../stores/layerStore.js';
import {get} from 'svelte/store';


const defaults = {fontSize: 20, height: 100, width: 50, depth: 50};

export function create3DDefault(graphObj) {
    layerNodes.subscribe(nodes => {
        let data = viewDeep3D(nodes);
        graphObj?.setData(data.nodes, data.links);
    })
}

function viewDeep3D(objects) {
    let data = {nodes: {}, links: []};
    const width = 500;
    const height = 500;
    const spacing = 20;

    const rotate = {
        "top": {x: -Math.PI / 2},
        "bottom": {x: Math.PI / 2},
        "left": {y: -Math.PI / 2},
        "right": {y: Math.PI / 2},
        "front": {z: 0},
        "back": {y: Math.PI}
    }
    const position = {
        "top": {fx: 0, fy: height / 2, fz: 0},
        "bottom": {fx: 0, fy: -height / 2, fz: 0},
        "left": {fx: -width / 2, fy: 0, fz: 0},
        "right": {fx: width / 2, fy: 0, fz: 0},
        "front": {fx: 0, fy: 0, fz: width / 2},
        "back": {fx: 0, fy: 0, fz: -width / 2}
    }
    const orientation = {
        "top": {x: 0, y: 1, z: 0},
        "bottom": {x: 0, y: -1, z: 0},
        "left": {x: -1, y: 0, z: 0},
        "right": {x: 1, y: 0, z: 0},
        "front": {x: 0, y: 0, z: 1},
        "back": {x: 0, y: 0, z: -1}
    }
    for (let lname in objects) {
        let layer = objects[lname];
        data.nodes[lname] = {
            id: lname,
            name: lname,
            description: layer.description,
            color: layer.color,
            opacity: 0.5,
            view: view3D,
            rotate: rotate[layer.orientation],
            fx: position[layer.orientation].fx,
            fy: position[layer.orientation].fy,
            fz: position[layer.orientation].fz,
            orientation: orientation[layer.orientation],
            layers: layer.layers,
            width: width,
            height: height
        }
        let config = {
            spacing: spacing,
            width: width,
            height: height,
            id: lname,
            rotate: rotate[layer.orientation],
            orientation: orientation[layer.orientation],
            color: _lightenColor(layer.color, 0.20),
            opacity: 1,
            fontSize: defaults.fontSize * 0.75,
        }
        _getLayerObjects(layer, data, config);
    }
    return data;
}
function view3D(obj, type) {
    let width = obj.width || defaults.width;
    let height = obj.height || defaults.height;
    let depth = obj.depth || defaults.depth;
    let color = obj.color || defaults.color;
    let opacity = obj.opacity || defaults.opacity;

    if (type === 'Selected') {
        color = "yellow";
    } else if (type === 'Targeted') {
        color = "red";
    } else if (type === 'Sourced') {
        color = "green";
    }
    let shape = new THREE.BoxGeometry(width, height, depth);
    const material = new THREE.MeshPhysicalMaterial({
        color: color,
        transparent: true,
        opacity: opacity,
        depthTest: true,
        alphaTest: 0,
        reflectivity: 0.2,
        thickness: 6,
        metalness: 0,
        side: THREE.DoubleSide
    });
    let group = new THREE.Mesh(shape, material);
    let labelText = obj.name;
    let fontSize = obj.fontSize || defaults.fontSize;

    let label = AText.view3D({text: labelText, color: "#ffffff", parent: group, width: width, verticalAlign: 'top', size: fontSize});
    group.width = defaults.width;
    group.height = defaults.height;
    if (obj.rotate) {
        if (obj.rotate.x) {
            group.applyMatrix4(new THREE.Matrix4().makeRotationX(obj.rotate.x));
        }
        if (obj.rotate.y) {
            group.applyMatrix4(new THREE.Matrix4().makeRotationY(obj.rotate.y));
        }
        if (obj.rotate.z) {
            group.applyMatrix4(new THREE.Matrix4().makeRotationZ(obj.rotate.z));
        }
    }
    return group;
}

function _calculateBox(node) {
    let height = defaults.height;
    let width = defaults.width;
    let depth = defaults.depth;
    let radius = Math.max(Math.sqrt(width * width + height * height), Math.sqrt(height * height + depth * depth), Math.sqrt(width * width + depth * depth)) / 2;
    return {w: width, h: height, d: depth, r: radius};
}

function _getLayerObjects(layer, data, config) {
    // First calculate the rows and cols
    let totalRows = 1;
    let totalCols = 1;
    for (let i in layer.layers) {
        let sublayer = layer.layers[i];
        totalRows = Math.max(totalRows, sublayer.position.row + (sublayer.position.rowspan || 1) - 1);
        totalCols = Math.max(totalCols, sublayer.position.col + (sublayer.position.colspan || 1) - 1);
    }
    const totalHorizontalSpacing = (totalCols + 1) * config.spacing;
    const totalVerticalSpacing = ((totalRows + 1) * config.spacing) + 2 * config.fontSize;

    const adjustParentWidth = config.width - totalHorizontalSpacing;
    const adjustParentHeight = config.height - totalVerticalSpacing;

    const cellWidth = adjustParentWidth / totalCols;
    const cellHeight = adjustParentHeight / totalRows;
    const parentOffsetX = (config.width / 2);
    const parentOffsetY = (config.height / 2) - 3 * config.fontSize;

    for (let lname in layer.layers) {
        let lid = `${config.id}-${lname}`;
        let sublayer = layer.layers[lname];
        let colspan = sublayer.position.colspan || 1;
        let rowspan = sublayer.position.rowspan || 1;
        let mywidth = (colspan * cellWidth) + ((colspan - 1) * config.spacing);
        let myheight = (rowspan * cellHeight) + ((rowspan - 1) * config.spacing);
        let middleCol = sublayer.position.col + (colspan - 1) / 2;
        let middleRow = sublayer.position.row + (rowspan - 1) / 2;
        let x = (middleCol - 1) * (cellWidth + config.spacing) + cellWidth / 2;
        let y = -((middleRow - 1) * (cellHeight + config.spacing) + cellHeight / 2);
        // Now offset based on the myWidth
        x -= parentOffsetX;
        y += parentOffsetY;
        let pos = {
            fx: x + config.spacing / 1.1,
            fy: y,
            fz: 5,
            width: mywidth,
            height: myheight
        }
        data.nodes[lid] = {
            id: lid,
            name: lname,
            description: sublayer.description,
            color: sublayer.color || config.color,
            opacity: config.opacity,
            fontSize: config.fontSize,
            view: view3D,
            rotate: config.rotate,
            orientation: config.orientation,
            layers: sublayer.layers,
            rbox: {
                parent: config.id,
                fx: pos.fx,
                fy: pos.fy,
                fz: pos.fz
            },
            width: pos.width,
            height: pos.height,
        }

        if (sublayer.layers) {
            let subConfig = {
                spacing: config.spacing / 2,
                width: pos.width,
                height: pos.height,
                id: lid,
                rotate: config.rotate,
                orientation: config.orientation,
                color: _lightenColor(sublayer.color, 0.20),
                opacity: 1,
                fontSize: config.fontSize * 0.75,
            }
            _getLayerObjects(sublayer, data, subConfig);
        }
    }
}

function _lookAtLayer(layer) {
    windows.graph.selectNode(layer.id);
    // Create bounding box and get its size to calculate dimensions
    const box = new THREE.Box3().setFromObject(object);
    const size = new THREE.Vector3();
    box.getSize(size); // Get the size of the object
    box.getCenter(objectCenter); // Center of the object

// Optional: Move the camera farther away so the object fits in the view
    const maxDim = Math.max(size.x, size.y, size.z); // Largest dimension of the object
    const fov = camera.fov * (Math.PI / 180); // Convert vertical FOV to radians
    const cameraDistance = maxDim / (2 * Math.tan(fov / 2)); // Distance required to fit object

// Set the camera position (e.g., along the Z-axis)
    camera.position.set(objectCenter.x, objectCenter.y, objectCenter.z + cameraDistance);

// Make the camera look at the object's center
    camera.lookAt(objectCenter);
}
function _lightenColor(hex, percent) {
    // Convert hex color to RGB
    const r = parseInt(hex.slice(1, 3), 16);
    const g = parseInt(hex.slice(3, 5), 16);
    const b = parseInt(hex.slice(5, 7), 16);

    // Calculate the amount of lightening
    const newR = Math.min(255, r + (255 - r) * percent / 100);
    const newG = Math.min(255, g + (255 - g) * percent / 100);
    const newB = Math.min(255, b + (255 - b) * percent / 100);

    // Convert back to hex format
    return (
        "#" +
        [newR, newG, newB]
            .map(value => Math.round(value).toString(16).padStart(2, '0'))
            .join("")
    );
}